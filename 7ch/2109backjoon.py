# 문제
# 한 저명한 학자에게 n(0 ≤ n ≤ 10,000)개의 대학에서 강연 요청을 해 왔다.
# 각 대학에서는 d(1 ≤ d ≤ 10,000)일 안에 와서 강연을 해 주면 p(1 ≤ p ≤ 10,000)만큼의 강연료를 지불하겠다고 알려왔다.
# 각 대학에서 제시하는 d와 p값은 서로 다를 수도 있다.
# 이 학자는 이를 바탕으로, 가장 많은 돈을 벌 수 있도록 순회강연을 하려 한다.
# 강연의 특성상, 이 학자는 하루에 최대 한 곳에서만 강연을 할 수 있다.
#
# 예를 들어 네 대학에서 제시한 p값이 각각 50, 10, 20, 30이고, d값이 차례로 2, 1, 2, 1 이라고 하자.
# 이럴 때에는 첫째 날에 4번 대학에서 강연을 하고, 둘째 날에 1번 대학에서 강연을 하면 80만큼의 돈을 벌 수 있다.
#
# 입력
# 첫째 줄에 정수 n이 주어진다. 다음 n개의 줄에는 각 대학에서 제시한 p값과 d값이 주어진다.
#
# 출력
# 첫째 줄에 최대로 벌 수 있는 돈을 출력한다.
#
# 예제 입력 1
# 7
# 20 1
# 2 1
# 10 3
# 100 2
# 8 2
# 5 20
# 50 10
# 예제 출력 1
# 185
# 예제 입력 2
# 4
# 20 2
# 30 2
# 40 3
# 40 3
# 예제 출력 2
# 110
# 예제 입력 3
# 2
# 10 2
# 10 2
# 예제 출력 3
# 20
# 우선 순위 큐, 최대 힙, 그리디
import heapq
import sys
input = sys.stdin.readline
n = int(input())        # 요청 개수
tasks = [[] for _ in range(10001)]      # 1일부터 10000일 대학 강연 요청 리스트
for _ in range(n):      # n 개 강연 요청 입력
    p, d = map(int,input().split())
    tasks[d].append(p)      # 해당 날짜에 강연 요청 삽입
# 최대 힙
max_heap = []
answer = 0
for day in range(10000,0,-1):   # 10000일부터 1일까지 거꾸로 강연 배정
    for pay in tasks[day]:      # 해당 day의 강연료를 전부 최대힙에 추가
        heapq.heappush(max_heap,-pay)   # 최대힙 구현을 위해서 -을 붙여서 삽입
    if max_heap:        # 현재 max_heap에 있는 요청은 day에 배정할 수 있다.
        answer += -heapq.heappop(max_heap)
print(answer)