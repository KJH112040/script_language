# 2 + 1 세일
# Description
#
# KSG 편의점에서는 과일우유, 드링킹요구르트 등의 유제품을 '2+1 세일'하는 행사를 하고 있습니다.
#
# KSG 편의점에서 유제품 3개를 한 번에 산다면 그중에서 가장 싼 것은 무료로 지불하고 나머지 두 개의 제품 가격만 지불하면 됩니다.
#
# 한 번에 3개의 유제품을 사지 않는다면 할인 없이 정가를 지불해야 합니다.
#
# 예를 들어, 7개의 유제품이 있어서 각 제품의 가격이 10, 9, 4, 2, 6, 4, 3이고 재현이가 (10, 3, 2), (4, 6, 4), (9)로
#
# 총 3번에 걸쳐서 물건을 산다면 첫 번째 꾸러미에서는 13원을, 두 번째 꾸러미에서는 10원을, 세 번째 꾸러미에서는 9원을 지불해야 합니다.
#
# 재현이는 KSG 편의점에서 친구들과 같이 먹을 총 N팩의 유제품을 구입하려고 합니다.
#
# 재현이를 도와 최소비용으로 유제품을 구입할 수 있도록 도와주세요!
#
#
# Input
#
# 첫 번째 줄에는 유제품의 수 N (1 ≤ N ≤ 100,000)이 주어집니다.
#
# 두 번째 줄부터 N개의 줄에는 각 유제품의 가격 Ci(1 ≤ Ci≤ 100,000)가 주어집니다.
#
#
# Output
#
# 재현이가 N개의 유제품을 모두 살 때 필요한 최소비용을 출력합니다.
#
# 정답은 2^(31)-1보다 작거나 같다.
# 4
# 3
# 2
# 3
# 2
# n = int(input())
# ci = [int(input()) for _ in range(n)]
# ci.sort(reverse=True)
# cnt = 0
# result = 0
# for c in ci:
#     if cnt == 2:
#         cnt=0
#     else:
#         result += c
#         cnt+=1
# print(result)
#
#
# 보드게임 최대점수 구하기
# Description
#
# n x m 크기의 보드가 주어지고, 각 칸에는 정수형 점수가 쓰여져 있습니다.
#
# 게임을 진행하는 동안 매 턴마다 말을 상, 하, 좌, 우로 한 칸씩 이동할 수 있으며, 이동한 칸에 쓰여진 점수를 획득합니다.
#
# 게임 시작 전에 진행자는 시작 위치를 정해야 하는데, 진행자가 받는 점수는 해당 위치에서 출발하여 일정 턴 수를 진행한 후 얻을 수 있는 점수 중 최대값을 얻도록 해야 합니다.
#
# 게임의 규칙은 다음과 같습니다:
#
# 매 턴마다 말은 상, 하, 좌, 우로 한 칸씩 이동할 수 있습니다.
# 이동한 칸에 쓰여진 점수를 획득합니다.
# 진행자는 일정 턴 수를 진행한 후 얻을 수 있는 점수 중 최대값을 받도록 이동해야 합니다.
# 단 진행자의 점수가 최대값을 받는 위치를 시작위치로 정해야합니다.
# 시작위치의 점수는 합산되지 않습니다.
# 주어진 보드와 턴 수에 대해, 진행자가 받을 수 있는 최대 점수를 출력하세요.
#
#
# Input
#
# 첫번째 줄에는 보드 크기n (1 <= n <= 150), m (1 <= m <= 150)입력, n행 m열 보드 크기를 가리킨다.
#
# 그다음 n개 줄에 걸쳐서 nxm 보드 칸 점수가 입력, (1<=각 칸의 점수<=1000)
#
# 마지막 줄에는 진행될 턴수k (1 <= k <= 150) 입력
#
#
# Output
#
# 진행자가 받는 최대 점수 (정수) 출력
#dp[t][i][j] = max(dp[t-1][i-1][j], dp[t-1][i+1][j], dp[t-1][i][j-1], dp[t-1][i][j+1]) + board[i][j]
# 3 3
# 1 2 3
# 4 5 6
# 7 8 9
# 3
# n, m = map(int,input().split())
# score = [list(map(int,input().split())) for _ in range(n)]
# k = int(input())
# dp = [[[0]*m]for _ in range(n)]
# for t in range(1,k):
#     for i in range(n):
#         for j in range(m):
#
#             dp[t][i][j] = max(dp[t-1][i-1][j], dp[t-1][i+1][j], dp[t-1][i][j-1], dp[t-1][i][j+1]) + score[i][j]
# print(dp)
# n = int(input())
# score=[int(input())for _ in range(n)]
# dp = [0] * 301
# dp[0] = 0
# dp[1] = score[0]
# dp[2] = dp[1]+score[1]
# for i in range(3,n+1):
#     dp[i] = max(dp[i-2], dp[i-1]) + score[i-1]
# print(dp[n])
n, joker = map(int,input().split())
string = input()
d = 0
k = 0
o = 0
r = 0
for c in string:
    if c=='d':
        d+=1
    if c=='k':
        k+=1
    if c=='o':
        o+=1
    if c=='r':
        r+=1
score = d*d + k*k + o*o + r*r
if d>1 and k>1 and o >1 and r>1:
    score += min(d,k,o,r) + joker