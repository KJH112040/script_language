# 문제
# 인하대학교 후문 뒤쪽에는 어두운 굴다리가 있다.
# 겁쟁이 상빈이는 길이 조금이라도 어둡다면 가지 않는다.
# 따라서 굴다리로 가면 최단거리로 집까지 갈수 있지만, 굴다리는 어둡기 때문에 빙빙 돌아서 집으로 간다.
# 안타깝게 여긴 인식이는 굴다리 모든 길 0~N을 밝히게 가로등을 설치해 달라고 인천광역시에 민원을 넣었다.
# 인천광역시에서 가로등을 설치할 개수 M과 각 가로등의 위치 x들의 결정을 끝냈다.
# 그리고 각 가로등은 높이만큼 주위를 비출 수 있다.
# 하지만 갑자기 예산이 부족해진 인천광역시는 가로등의 높이가 높을수록 가격이 비싸지기 때문에
# 최소한의 높이로 굴다리 모든 길 0~N을 밝히고자 한다.
# 최소한의 예산이 들 높이를 구하자.
# 단 가로등은 모두 높이가 같아야 하고, 정수이다.
#
# 다음 그림을 보자.
#
# 가로등의 높이가 H라면 왼쪽으로 H, 오른쪽으로 H만큼 주위를 비춘다.
#
# 다음 그림은 예제1에 대한 설명이다.
#
# 가로등의 높이가 1일 경우 0~1사이의 길이 어둡기 때문에 상빈이는 지나가지 못한다.
#
# 아래 그림처럼 높이가 2일 경우 0~5의 모든 길이 밝기 때문에 상빈이는 지나갈 수 있다.
#
#
#
# 입력
# 첫 번째 줄에 굴다리의 길이 N 이 주어진다. (1 ≤ N ≤ 100,000)
# 두 번째 줄에 가로등의 개수 M 이 주어진다. (1 ≤ M ≤ N)
# 다음 줄에 M 개의 설치할 수 있는 가로등의 위치 x 가 주어진다. (0 ≤ x ≤ N)
# 가로등의 위치 x는 오름차순으로 입력받으며 가로등의 위치는 중복되지 않으며, 정수이다.
#
# 출력
# 굴다리의 길이 N을 모두 비추기 위한 가로등의 최소 높이를 출력한다.
def check(mid):     # mid 높이로 굴다리 전체를 다 비추는가?
    point = 0       # 굴다리 시작 위치로 초기화
    for light in x: # x배열의 가로등 전체에 대해서
        if light - mid > point: # 현재 가로등의 왼쪽 비추는 범위가 p를 포함하지 않으면
            return False
        else:
            point = light + mid # 현재 가로등의 비추는 오른쪽 범위로 p 설정
    if point >= N:   # 마지막 가로등 오른쪽 범위가 N을 포함해야 한다.
        return True
    else:
        return False

# 이분 탐색
N = int(input())
M = int(input())
x = list(map(int,input().split()))
start = 1
end = N
result = 0
while start<=end:
    mid = (start+end) // 2
    if check(mid):  # mid 높이로 굴다리 전체를 다 비추는가?
        result = mid        # 조건을 만족하면 정답 후보
        end = mid - 1       # 가로등 높이를 낮춰서 검사
    else:
        start = mid + 1     # 가로등 높이를 높여서 검사
print(result)